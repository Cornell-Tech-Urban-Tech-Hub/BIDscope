---
// AstroImageLoader.astro - A component that loads and optimizes images using Astro's Image component
import { Image } from 'astro:assets';

// Define props with TypeScript for type safety
interface Props {
  src: string;
  alt?: string;
  width?: number;
  height?: number;
  class?: string;
}

// Destructure the props with defaults
const { src, alt = '', width = 800, height = 600, class: className = '' } = Astro.props;

// Process the image path
let imagePath;
try {
  // Handle paths that include /src/ by removing that part
  // and any leading slash to make it relative to project root
  let importPath = src;
  
  // Remove /src/ prefix if present (common in your file paths)
  if (importPath.includes('/src/')) {
    importPath = importPath.replace('/src/', '');
  } else if (importPath.startsWith('src/')) {
    importPath = importPath.replace('src/', '');
  }
  
  // Remove any leading slash
  if (importPath.startsWith('/')) {
    importPath = importPath.substring(1);
  }
  
  // Use dynamic import to get the image
  const imageModule = await import(`../../${importPath}`);
  imagePath = imageModule.default;
} catch (error) {
  console.error(`Failed to import image: ${src}`, error);
  console.error("Import error details:", error);
}
---

<div class="astro-image-container">
  {imagePath ? (
    <Image 
      src={imagePath} 
      alt={alt} 
      width={width}
      height={height}
      class={`astro-image ${className}`}
    />
  ) : (
    <div class="error-message">
      <p>Failed to load image: {src}</p>
      <p>Make sure the image exists and the path is correct</p>
    </div>
  )}
</div>

<style>
  .astro-image-container {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
  }
  
  .astro-image {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 0 auto;
  }
  
  .error-message {
    color: red;
    padding: 1rem;
    border: 1px solid red;
    border-radius: 4px;
    margin: 1rem 0;
    text-align: center;
  }
</style>
