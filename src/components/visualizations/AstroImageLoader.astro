---
import { Image } from 'astro:assets';
import { existsSync } from 'node:fs';
import path from 'node:path';

interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
}

const { src, alt, width, height, class: className, ...rest } = Astro.props;

let imageSrc;
let isLocalImage = false;
let isExternalImage = false;
let imageExists = false;

// Check if it's an external URL
if (src.startsWith('http://') || src.startsWith('https://')) {
  isExternalImage = true;
} else {
  // Handle local image paths
  try {
    // Remove leading slash for proper import path
    const importPath = src.startsWith('/') ? src.substring(1) : src;
    
    // Check if file exists
    const absolutePath = path.join(process.cwd(), importPath);
    imageExists = existsSync(absolutePath);
    
    if (imageExists) {
      // Dynamically import the image
      imageSrc = await import(`/${importPath}`);
      isLocalImage = true;
    }
  } catch (error) {
    console.error(`Error loading image from path: ${src}`, error);
  }
}
---

{isLocalImage && imageSrc ? (
  <Image 
    src={imageSrc.default} 
    alt={alt}
    width={width}
    height={height}
    class={className}
    {...rest}
  />
) : isExternalImage ? (
  <img 
    src={src} 
    alt={alt} 
    width={width} 
    height={height} 
    class={className}
    {...rest}
  />
) : (
  <div class={`image-error ${className || ''}`}>
    <p>Unable to load image: {src}</p>
  </div>
)}

<style>
  .image-error {
    padding: 1rem;
    border: 1px dashed #ccc;
    background-color: #f9f9f9;
    text-align: center;
    font-size: 0.875rem;
    color: #666;
  }
  
  img {
    max-width: 100%;
    height: auto;
    display: block;
  }
</style>
