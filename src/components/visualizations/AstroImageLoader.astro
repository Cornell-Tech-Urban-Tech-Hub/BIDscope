---
// AstroImageLoader.astro - A component that loads and optimizes images using Astro's Image component
import { Image } from 'astro:assets';

// Define props with TypeScript for type safety
interface Props {
  src: string;
  alt?: string;
  width?: number;
  height?: number;
  class?: string;
}

// Destructure the props with defaults
const { src, alt = '', width = 800, height = 600, class: className = '' } = Astro.props;

// Process the image path
let imagePath;
let isExternalImage = false;

// Check if the source is an external URL
if (src.startsWith('http://') || src.startsWith('https://')) {
  isExternalImage = true;
  imagePath = src;
} else {
  try {
    // Handle paths that include /src/ by removing that part
    // and any leading slash to make it relative to project root
    let importPath = src;
    
    // For relative paths starting with ../../
    if (importPath.startsWith('../../')) {
      // These are already properly formatted relative to the component location
      importPath = importPath;
    }
    // Remove /src/ prefix if present (common in your file paths)
    else if (importPath.includes('/src/')) {
      importPath = importPath.replace('/src/', '/');
    } else if (importPath.startsWith('src/')) {
      importPath = importPath.replace('src/', '');
    }
    
    // Remove any leading slash for import
    if (importPath.startsWith('/')) {
      importPath = importPath.substring(1);
    }
    
    console.log(`Attempting to import image: ${importPath}`);
    
    // Use dynamic import to get the image
    const imageModule = await import(`../../${importPath}`);
    imagePath = imageModule.default;
  } catch (error) {
    console.error(`Failed to import image: ${src}`, error);
    console.log("Import path attempted:", src);
    
    // Try an alternative approach for public directory images
    if (src.startsWith('/') && !src.startsWith('/src/')) {
      // This might be a public directory image, use directly
      imagePath = src;
      isExternalImage = true;
    }
  }
}

// Get the base URL for proper path resolution
const baseUrl = import.meta.env.BASE_URL || '/';
---

{isExternalImage ? (
  <div class="astro-image-container">
    <img 
      src={imagePath} 
      alt={alt} 
      class={`astro-image ${className}`}
      loading="lazy"
    />
  </div>
) : imagePath ? (
  <div class="astro-image-container">
    <Image 
      src={imagePath} 
      alt={alt} 
      width={width}
      height={height}
      class={`astro-image ${className}`}
    />
  </div>
) : (
  <div class="error-message">
    <p>Failed to load image: {src}</p>
    <p>Make sure the image exists and the path is correct</p>
  </div>
)}

<style>
  .astro-image-container {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
  }
  
  .astro-image {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 0 auto;
  }
  
  .error-message {
    color: red;
    padding: 1rem;
    border: 1px solid red;
    border-radius: 4px;
    margin: 1rem 0;
    text-align: center;
  }
</style>
