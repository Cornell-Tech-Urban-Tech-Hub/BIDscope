---
import { getCollection } from 'astro:content';
import DynamicComponentLoader from '../../components/visualizations/DynamicComponentLoader.jsx';
import AstroImageLoader from '../../components/visualizations/AstroImageLoader.astro';

// Define a custom minimal layout for component-only view
const base = import.meta.env.BASE_URL || '/';

// Generate paths for all components from all projects
export async function getStaticPaths() {
  const projectEntries = await getCollection('projects');
  const paths = [];
  
  // Process each project's components
  projectEntries.forEach(entry => {
    // Get all component types from the project
    const componentTypes = [
      'insightComponents', 
      'transformationComponents', 
      'predictionComponents', 
      'consensusComponents'
    ];
    
    // For each component type, add paths for each component
    componentTypes.forEach(type => {
      const components = entry.data[type] || [];
      
      components.forEach((componentPath, index) => {
        // Create a unique ID for this component
        const componentId = `${entry.slug}-${type}-${index}`;
        
        // Extract component title based on its type
        let componentTitle = '';
        switch (type) {
          case 'insightComponents':
            componentTitle = `Insight Visualization ${index + 1}`;
            break;
          case 'transformationComponents':
            componentTitle = `Transformation Visualization ${index + 1}`;
            break;
          case 'predictionComponents':
            componentTitle = `Prediction Visualization ${index + 1}`;
            break;
          case 'consensusComponents':
            componentTitle = `Consensus Visualization ${index + 1}`;
            break;
        }
        
        // Add path for this component
        paths.push({
          params: { component: componentId },
          props: { 
            componentPath, 
            projectTitle: entry.data.title,
            projectSlug: entry.slug, 
            componentTitle,
            bidName: entry.data.bidName
          }
        });
      });
    });
  });
  
  return paths;
}

// Get component data from props
const { componentPath, projectTitle, projectSlug, componentTitle, bidName } = Astro.props;

// Helper function to check if a path is an image
function isImagePath(path) {
  if (!path) return false;
  const ext = path.split('.').pop().toLowerCase();
  return ['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp'].includes(ext);
}

// Determine if this component is an image
const isImage = isImagePath(componentPath);
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{componentTitle} - {projectTitle} | BIDSpec</title>
    <style>
      /* Minimal styles for component view page */
      body {
        margin: 0;
        padding: 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
        background-color: #ffffff;
      }
      
      .component-page {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        width: 100%;
      }
      
      .component-header {
        background-color: #f9f9f9;
        padding: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
        z-index: 10;
      }
      
      .component-title {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
      }
      
      .back-link {
        color: #B31B1B;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 500;
        font-size: 0.9rem;
      }
      
      .component-container {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        width: 100%;
        box-sizing: border-box;
      }
      
      .component-wrapper {
        width: 100%;
        height: 100%;
        min-height: 70vh;
        background-color: #ffffff;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        border-radius: 8px;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      /* Fixed styling for image components */
      .image-wrapper {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
        max-height: 90vh;
        padding: 1rem;
        box-sizing: border-box;
      }
      
      .image-wrapper :global(img),
      .image-wrapper .astro-image {
        max-width: 100%;
        max-height: 85vh;
        width: auto;
        height: auto;
        object-fit: contain;
        display: block;
        margin: 0 auto;
      }

      .image-wrapper .astro-image-container {
        width: auto;
        height: auto;
        max-width: 100%;
        max-height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      @media (max-width: 768px) {
        .component-container {
          padding: 1rem;
        }
        
        .image-wrapper {
          padding: 1rem;
        }
      }
    </style>
  </head>
  <body>
    <div class="component-page">
      <header class="component-header">
        <h1 class="component-title">{componentTitle} - {bidName}</h1>
        <a href={`${base}/projects/${projectSlug}`} class="back-link">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="m15 18-6-6 6-6"></path>
          </svg>
          Back to Project
        </a>
      </header>
      
      <main class="component-container">
        <div class="component-wrapper">
          {isImage ? (
            <div class="image-wrapper">
              <AstroImageLoader 
                src={componentPath} 
                alt={componentTitle} 
                class="fullscreen-image"
              />
            </div>
          ) : (
            <DynamicComponentLoader client:only="react" componentPath={componentPath} />
          )}
        </div>
      </main>
    </div>
  </body>
</html>
