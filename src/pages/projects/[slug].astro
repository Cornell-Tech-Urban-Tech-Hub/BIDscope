---
import FullWidthLayout from '../../layouts/FullWidthLayout.astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import MapVisualizer from '../../components/visualizations/MapVisualizer.js';
import fs from 'node:fs';
import path from 'node:path';
import '../../styles/projects.css';
import DynamicComponentLoader from '../../components/visualizations/DynamicComponentLoader.jsx';
import AstroImageLoader from '../../components/visualizations/AstroImageLoader.astro';
import { marked } from 'marked'; // Import marked for markdown parsing

// Define getStaticPaths to tell Astro which paths to generate
export async function getStaticPaths() {
  const projectEntries = await getCollection('projects');
  
  return projectEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Get the project data from the props
const { entry } = Astro.props;
const { Content, headings } = await entry.render();

// Get base URL correctly - ensuring it ends with a slash for relative paths
const base = import.meta.env.BASE_URL || '/';
const baseUrl = base.endsWith('/') ? base : `${base}/`;

// Get BID names from all projects for the map
const allProjects = await getCollection('projects');
const projectBids = allProjects.map(project => project.data.bidName);

// Check if this BID exists in the GeoJSON
let bidInMap = false;
let bidGeoData = null;
try {
  const geojsonPath = path.join(process.cwd(), 'public', 'data', 'bids.geojson');
  const geojsonData = JSON.parse(fs.readFileSync(geojsonPath, 'utf8'));
  const bidFeature = geojsonData.features.find(
    feature => feature.properties.F_ALL_BI_2 === entry.data.bidName
  );
  
  if (bidFeature) {
    bidInMap = true;
    bidGeoData = bidFeature;
  }
} catch (error) {
  console.error('Error loading BID map data:', error);
}

// Format date
function formatDate(date) {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

// Check for visualization components or revision mode
const isRevisionMode = entry.data.revisionMode === true;
const hasInsightViz = (entry.data.insightComponents && entry.data.insightComponents.length > 0) || isRevisionMode;
const hasTransformationViz = (entry.data.transformationComponents && entry.data.transformationComponents.length > 0) || isRevisionMode;
const hasPredictionViz = (entry.data.predictionComponents && entry.data.predictionComponents.length > 0) || isRevisionMode;
const hasConsensusViz = (entry.data.consensusComponents && entry.data.consensusComponents.length > 0) || isRevisionMode;

// Process visualization components
const insightVizComponents = entry.data.insightComponents || [];
const transformationVizComponents = entry.data.transformationComponents || [];
const predictionVizComponents = entry.data.predictionComponents || [];
const consensusVizComponents = entry.data.consensusComponents || [];

// Import the raw markdown content
let rawContent = '';
let parsedSections = {
  intro: '',
  insight: '',
  transformation: '',
  prediction: '',
  consensus: '',
  additional: ''
};

try {
  if (fs.existsSync(path.join(process.cwd(), 'src/content/projects', `${entry.slug}.md`))) {
    rawContent = await fs.promises.readFile(path.join(process.cwd(), 'src/content/projects', `${entry.slug}.md`), 'utf8');
    
    // Filter out any metadata header sections from the markdown before processing
    rawContent = rawContent.replace(/^---[\s\S]*?---\s*/m, ''); // Remove frontmatter if present
    
    // Extract the introduction (content before the first heading)
    const introMatch = rawContent.match(/^([\s\S]*?)(?=# Insight Analysis|$)/);
    if (introMatch) {
      // Filter out any metadata-like content from intro
      let introContent = introMatch[1].trim();
      // Remove lines that look like metadata (e.g., "BID Name: Downtown")
      introContent = introContent.replace(/^.+:.+$/gm, '').trim();
      
      // Only add section title and parse if there's actual content
      if (introContent) {
        // Add a wrapper heading if none exists to improve formatting
        if (!introContent.match(/^#\s/m)) {
          introContent = `## Project Overview\n\n${introContent}`;
        }
        
        parsedSections.intro = marked.parse(introContent);
      }
    }
    
    // Extract section contents
    const sectionMatches = {
      insight: rawContent.match(/# Insight Analysis([\s\S]*?)(?=# Transformation Analysis|# Prediction Analysis|# Consensus Analysis|## Additional Resources|$)/i),
      transformation: rawContent.match(/# Transformation Analysis([\s\S]*?)(?=# Insight Analysis|# Prediction Analysis|# Consensus Analysis|## Additional Resources|$)/i),
      prediction: rawContent.match(/# Prediction Analysis([\s\S]*?)(?=# Insight Analysis|# Transformation Analysis|# Consensus Analysis|## Additional Resources|$)/i),
      consensus: rawContent.match(/# Consensus Analysis([\s\S]*?)(?=# Insight Analysis|# Transformation Analysis|# Prediction Analysis|## Additional Resources|$)/i),
    };
    
    // Store matched content with proper markdown parsing
    Object.keys(sectionMatches).forEach(section => {
      if (sectionMatches[section] && sectionMatches[section][1]) {
        // Parse the full section including the heading
        const sectionContent = sectionMatches[section][0].trim();
        // Only store if there's actual content beyond the heading
        if (sectionContent.length > (`# ${section} Analysis`).length) {
          parsedSections[section] = marked.parse(sectionContent);
        } else {
          parsedSections[section] = '';
        }
      } else {
        parsedSections[section] = '';
      }
    });
    
    // Skip processing the Additional Resources section - will use the template version instead
    const additionalMatch = rawContent.match(/## Additional Resources([\s\S]*?)$/i);
    if (additionalMatch && additionalMatch[1] && additionalMatch[1].trim()) {
      // Only parse if there's content beyond the heading
      const additionalContent = additionalMatch[0].trim();
      if (additionalContent.length > "## Additional Resources".length) {
        parsedSections.additional = marked.parse(additionalContent);
      } else {
        parsedSections.additional = '';
      }
    } else {
      parsedSections.additional = '';
    }
  }
} catch (error) {
  console.error('Error parsing markdown content:', error);
}

// Function to check if a section has actual content (not just HTML tags)
function hasContent(html) {
  if (!html) return false;
  // Remove HTML tags and check if there's text content
  const textContent = html.replace(/<[^>]*>/g, '').trim();
  return textContent.length > 0;
}

// Helper function to check if a path is an image
function isImagePath(path) {
  if (!path) return false;
  const ext = path.split('.').pop().toLowerCase();
  return ['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp'].includes(ext);
}

// Function to normalize component paths for loading
function normalizeComponentPath(path) {
  if (!path) return '';
  // Handle relative paths that point to the src directory
  if (path.startsWith('../../') || path.startsWith('../')) {
    return path;
  }
  // Handle absolute paths
  if (path.startsWith('/')) {
    return path;
  }
  // Handle URLs
  if (path.startsWith('http')) {
    return path;
  }
  // Default case - ensure path is relative to the base URL
  return `${baseUrl}${path.startsWith('/') ? path.substring(1) : path}`;
}
---

<FullWidthLayout 
  title={`${entry.data.title} | BIDSpec`}
  description={entry.data.description}
>
  <div class="max-w-5xl mx-auto px-4 py-12">
    <a href={`${baseUrl}projects`} class="text-primary hover:underline flex items-center gap-2">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m15 18-6-6 6-6"></path></svg>
      Back to Projects
    </a>

    <article class="max-w-5xl mx-auto">
      <header class="project-header">
        <div class="flex items-center gap-2 text-muted-foreground text-sm mb-2">
          <span>{formatDate(entry.data.publishDate)}</span>
          <span>â€¢</span>
          <span class="bg-primary/10 text-primary px-2 py-1 rounded-full text-xs">{entry.data.borough}</span>
        </div>
        
        <h1 class="text-4xl font-bold mb-4">{entry.data.title}</h1>
        
        <div class="project-meta">
          <div class="project-meta-item">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="project-meta-icon"><path d="M3 3v18h18"/><path d="m19 9-5 5-4-4-3 3"/></svg>
            <span>{entry.data.bidName}</span>
            {bidInMap && (
              <span class="bg-primary/20 text-primary text-xs px-2 py-1 rounded-full ml-2">
                On Map
              </span>
            )}
          </div>
          
          {entry.data.yearEstablished && (
            <div class="project-meta-item">
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="project-meta-icon"><rect width="18" height="18" x="3" y="4" rx="2" ry="2"/><line x1="16" x2="16" y1="2" y2="6"/><line x1="8" x2="8" y1="2" y2="6"/><line x1="3" x2="21" y1="10" y2="10"/></svg>
              <span>Established {entry.data.yearEstablished}</span>
            </div>
          )}
          
          {entry.data.tags && entry.data.tags.length > 0 && (
            <div class="project-meta-item flex-wrap">
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="project-meta-icon"><path d="M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"/><path d="M7 7h.01"/></svg>
              <div class="flex flex-wrap gap-1 ml-1">
                {entry.data.tags.map(tag => (
                  <span class="bg-secondary text-secondary-foreground px-2 py-0.5 rounded text-xs">{tag}</span>
                ))}
              </div>
            </div>
          )}
        </div>
      </header>

      {isRevisionMode && (
        <div class="bg-yellow-100 border-l-4 border-yellow-500 p-4 mb-8 text-sm">
          <strong>Revision Mode Active:</strong> Placeholder visualization containers will be displayed in each section.
        </div>
      )}

      <!-- Map section moved to top, right after header -->
      <div class="mb-8 mt-4">
        <div class="border rounded-lg overflow-hidden shadow-md">
          <MapVisualizer 
            client:only="react"
            projectBids={projectBids} 
            focusBid={entry.data.bidName} 
            height="400px"
            initialZoom={14}
            disableLongPress={true}
          />
        </div>
      </div>

      <div id="project-content" class="project-content prose prose-lg max-w-none overflow-visible">
        <!-- Add a marker to indicate content is ready -->
        <div id="content-marker" data-revision-mode={isRevisionMode.toString()} style="display:none;"></div>
        
        <!-- Introduction Section -->
        {hasContent(parsedSections.intro) && (
          <div class="content-section intro-section">
            <Fragment set:html={parsedSections.intro} />
          </div>
        )}
        
        <!-- Insight Section with Visualizations -->
        {hasContent(parsedSections.insight) || hasInsightViz ? (
          <div class="content-section insight-section">
            {hasContent(parsedSections.insight) && (
              <Fragment set:html={parsedSections.insight} />
            )}
            
            {hasInsightViz && (
              <div class="viz-section-wrapper overflow-visible">
                <div class="viz-row components-stack mt-6 mb-8">
                  {insightVizComponents.length > 0 ? (
                    insightVizComponents.map((component, i) => (
                      <div class="viz-container">
                        <h3 class="viz-title">Insight Visualization {i + 1}</h3>
                        <div class="viz-frame" data-component-id={`insight-viz-${i}`}>
                          <a href={`${baseUrl}components/${entry.slug}-insightComponents-${i}`} class="fullscreen-link" title="View Full Screen" aria-label={`View Insight Visualization ${i+1} in Full Screen`}>
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                              <path d="M8 3H5a2 2 0 0 0-2 2v3"></path>
                              <path d="M21 8V5a2 2 0 0 0-2-2h-3"></path>
                              <path d="M3 16v3a2 2 0 0 0 2 2h3"></path>
                              <path d="M16 21h3a2 2 0 0 0 2-2v-3"></path>
                            </svg>
                            View Full Screen
                          </a>
                          <div class="viz-component-wrapper">
                            {isImagePath(component) ? (
                              <AstroImageLoader src={component} alt={`Insight visualization ${i + 1}`} />
                            ) : (
                              <DynamicComponentLoader client:only="react" componentPath={normalizeComponentPath(component)} />
                            )}
                          </div>
                        </div>
                      </div>
                    ))
                  ) : isRevisionMode && (
                    <div class="viz-container">
                      <h3 class="viz-title">Insight Visualization 1</h3>
                      <div class="viz-frame" data-component-id="insight-viz-draft">
                        <div class="viz-component-wrapper">
                          <div class="viz-placeholder draft-placeholder">
                            <p><strong>Revision Mode:</strong> Add insight visualization component here</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        ) : null}
        
        <!-- Transformation Section with Visualizations -->
        {hasContent(parsedSections.transformation) || hasTransformationViz ? (
          <div class="content-section transformation-section">
            {hasContent(parsedSections.transformation) && (
              <Fragment set:html={parsedSections.transformation} />
            )}
            
            {hasTransformationViz && (
              <div class="viz-section-wrapper overflow-visible">
                <div class="viz-row components-stack mt-6 mb-8">
                  {transformationVizComponents.length > 0 ? (
                    transformationVizComponents.map((component, i) => (
                      <div class="viz-container">
                        <h3 class="viz-title">
                          <span>Transformation Visualization {i + 1}</span>
                        </h3>
                        <div class="viz-frame" data-component-id={`transformation-viz-${i}`}>
                          <a href={`${baseUrl}components/${entry.slug}-transformationComponents-${i}`} class="fullscreen-link" title="View Full Screen" aria-label={`View Transformation Visualization ${i+1} in Full Screen`}>
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                              <path d="M8 3H5a2 2 0 0 0-2 2v3"></path>
                              <path d="M21 8V5a2 2 0 0 0-2-2h-3"></path>
                              <path d="M3 16v3a2 2 0 0 0 2 2h3"></path>
                              <path d="M16 21h3a2 2 0 0 0 2-2v-3"></path>
                            </svg>
                            View Full Screen
                          </a>
                          <div class="viz-component-wrapper">
                            {isImagePath(component) ? (
                              <AstroImageLoader src={component} alt={`Transformation visualization ${i + 1}`} />
                            ) : (
                              <DynamicComponentLoader client:only="react" componentPath={normalizeComponentPath(component)} />
                            )}
                          </div>
                        </div>
                      </div>
                    ))
                  ) : isRevisionMode && (
                    <div class="viz-container">
                      <h3 class="viz-title">
                        <span>Transformation Visualization 1</span>
                      </h3>
                      <div class="viz-frame" data-component-id="transformation-viz-draft">
                        <div class="viz-component-wrapper">
                          <div class="viz-placeholder draft-placeholder">
                            <p><strong>Revision Mode:</strong> Add transformation visualization component here</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        ) : null}
        
        <!-- Prediction Section with Visualizations -->
        {hasContent(parsedSections.prediction) || hasPredictionViz ? (
          <div class="content-section prediction-section">
            {hasContent(parsedSections.prediction) && (
              <Fragment set:html={parsedSections.prediction} />
            )}
            
            {hasPredictionViz && (
              <div class="viz-section-wrapper overflow-visible">
                <div class="viz-row components-stack mt-6 mb-8">
                  {predictionVizComponents.length > 0 ? (
                    predictionVizComponents.map((component, i) => (
                      <div class="viz-container">
                        <h3 class="viz-title">Prediction Visualization {i + 1}</h3>
                        <div class="viz-frame" data-component-id={`prediction-viz-${i}`}>
                          <a href={`${baseUrl}components/${entry.slug}-predictionComponents-${i}`} class="fullscreen-link" title="View Full Screen" aria-label={`View Prediction Visualization ${i+1} in Full Screen`}>
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                              <path d="M8 3H5a2 2 0 0 0-2 2v3"></path>
                              <path d="M21 8V5a2 2 0 0 0-2-2h-3"></path>
                              <path d="M3 16v3a2 2 0 0 0 2 2h3"></path>
                              <path d="M16 21h3a2 2 0 0 0 2-2v-3"></path>
                            </svg>
                            View Full Screen
                          </a>
                          <div class="viz-component-wrapper">
                            {isImagePath(component) ? (
                              <AstroImageLoader src={component} alt={`Prediction visualization ${i + 1}`} />
                            ) : (
                              <DynamicComponentLoader client:only="react" componentPath={normalizeComponentPath(component)} />
                            )}
                          </div>
                        </div>
                      </div>
                    ))
                  ) : isRevisionMode && (
                    <div class="viz-container">
                      <h3 class="viz-title">Prediction Visualization 1</h3>
                      <div class="viz-frame" data-component-id="prediction-viz-draft">
                        <div class="viz-component-wrapper">
                          <div class="viz-placeholder draft-placeholder">
                            <p><strong>Revision Mode:</strong> Add prediction visualization component here</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        ) : null}
        
        <!-- Consensus Section with Visualizations -->
        {hasContent(parsedSections.consensus) || hasConsensusViz ? (
          <div class="content-section consensus-section">
            {hasContent(parsedSections.consensus) && (
              <Fragment set:html={parsedSections.consensus} />
            )}
            
            {hasConsensusViz && (
              <div class="viz-section-wrapper overflow-visible">
                <div class="viz-row components-stack mt-6 mb-8">
                  {consensusVizComponents.length > 0 ? (
                    consensusVizComponents.map((component, i) => (
                      <div class="viz-container">
                        <h3 class="viz-title">Consensus Visualization {i + 1}</h3>
                        <div class="viz-frame" data-component-id={`consensus-viz-${i}`}>
                          <a href={`${baseUrl}components/${entry.slug}-consensusComponents-${i}`} class="fullscreen-link" title="View Full Screen" aria-label={`View Consensus Visualization ${i+1} in Full Screen`}>
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                              <path d="M8 3H5a2 2 0 0 0-2 2v3"></path>
                              <path d="M21 8V5a2 2 0 0 0-2-2h-3"></path>
                              <path d="M3 16v3a2 2 0 0 0 2 2h3"></path>
                              <path d="M16 21h3a2 2 0 0 0 2-2v-3"></path>
                            </svg>
                            View Full Screen
                          </a>
                          <div class="viz-component-wrapper">
                            {isImagePath(component) ? (
                              <AstroImageLoader src={component} alt={`Consensus visualization ${i + 1}`} />
                            ) : (
                              <DynamicComponentLoader client:only="react" componentPath={normalizeComponentPath(component)} />
                            )}
                          </div>
                        </div>
                      </div>
                    ))
                  ) : isRevisionMode && (
                    <div class="viz-container">
                      <h3 class="viz-title">Consensus Visualization 1</h3>
                      <div class="viz-frame" data-component-id="consensus-viz-draft">
                        <div class="viz-component-wrapper">
                          <div class="viz-placeholder draft-placeholder">
                            <p><strong>Revision Mode:</strong> Add consensus visualization component here</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        ) : null}
        
        <!-- Additional Resources -->
        {hasContent(parsedSections.additional) && (
          <div class="content-section additional-section">
            <Fragment set:html={parsedSections.additional} />
          </div>
        )}
      </div>
      
      {(entry.data.dataSource || (entry.data.visualizationTechniques && entry.data.visualizationTechniques.length > 0)) && (
        <div class="data-sources-panel">
          <h3 class="data-sources-title">Data & Methodology</h3>
          
          {entry.data.dataSource && (
            <div class="data-source-item">
              <h4 class="data-source-label">Data Sources</h4>
              <p>{entry.data.dataSource}</p>
            </div>
          )}
          
          {entry.data.visualizationTechniques && entry.data.visualizationTechniques.length > 0 && (
            <div class="data-source-item">
              <h4 class="data-source-label">Visualization Techniques</h4>
              <div class="technique-tags">
                {entry.data.visualizationTechniques.map(technique => (
                  <span class="technique-tag">{technique}</span>
                ))}
              </div>
            </div>
          )}
        </div>
      )}
    </article>
  </div>

  <script>
    // Add event listener for fullscreen links to track visualization views
    document.addEventListener('DOMContentLoaded', () => {
      const fullscreenLinks = document.querySelectorAll('.fullscreen-link');
      fullscreenLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          const componentId = e.currentTarget.closest('.viz-frame')?.dataset.componentId;
          if (componentId) {
            console.log(`Fullscreen view requested for: ${componentId}`);
            // You could add analytics tracking here
          }
        });
      });
    });
  </script>
</FullWidthLayout>
