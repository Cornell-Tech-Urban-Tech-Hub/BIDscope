---
import Layout from '../../layouts/Default.astro';
import ProjectCard from '../../components/projects/ProjectCard.astro';
import MapVisualizer from '../../components/visualizations/MapVisualizer.js'; // Fix the import to use .tsx
import { getCollection } from 'astro:content';
import fs from 'node:fs';
import path from 'node:path';

// Fetch all projects
const allProjects = await getCollection('projects');

// Sort projects by publish date (newest first)
const sortedProjects = allProjects.sort((a, b) => 
  b.data.publishDate.getTime() - a.data.publishDate.getTime()
);

// Extract BID names for the map
const projectBids = allProjects.map(project => project.data.bidName);

// Create a mapping from BID names to project slugs
const bidToSlugMap = Object.fromEntries(
  allProjects.map(project => [project.data.bidName, project.slug])
);

// Get valid BID names from the GeoJSON file for validation
let mapBidNames = [];
try {
  const geojsonPath = path.join(process.cwd(), 'public', 'data', 'bids.geojson');
  const geojsonData = JSON.parse(fs.readFileSync(geojsonPath, 'utf8'));
  mapBidNames = geojsonData.features
    .map(feature => feature.properties.F_ALL_BI_2)
    .filter(Boolean);
} catch (error) {
  console.error('Error loading BID map data:', error);
}

// Get unique boroughs for filter
const boroughs = [...new Set(sortedProjects.map(project => project.data.borough))];
---

<Layout title="BID Projects | BIDSpec" description="Explore projects and analysis of Business Improvement Districts across NYC">
  <div class="container mx-auto px-4 py-12 projects-container">
    <div class="projects-header">
      <h1 class="projects-title">BID Analysis Projects</h1>
      <p class="projects-description">
        Explore in-depth analysis of Business Improvement Districts across NYC
      </p>
    </div>

    <!-- Map visualization - add a unique mapId and pass bidToSlugMap -->
    <div class="map-section">
      <h2 class="map-title">BID Map</h2>
      <div class="relative rounded-xl overflow-hidden border">
        <MapVisualizer 
          client:only="react" 
          projectBids={projectBids} 
          height="450px" 
          mapId="projects-page-map"
          bidToSlugMap={bidToSlugMap}
          disableLongPress={true}
        />
      </div>
    </div>

    <!-- Filters -->
    <div class="filter-container">
      <h2 class="filter-title">Project Filters</h2>
      <div class="filter-buttons" id="borough-filters">
        <button class="filter-button active" data-borough="all">All</button>
        {boroughs.map(borough => (
          <button class="filter-button" data-borough={borough}>
            {borough}
          </button>
        ))}
      </div>
    </div>

    <!-- Projects Grid -->
    <div class="projects-grid" id="projects-grid">
      {sortedProjects.map(project => (
        <ProjectCard 
          project={project} 
          hasBidOnMap={mapBidNames.includes(project.data.bidName)}
        />
      ))}
    </div>
  </div>
</Layout>

<script>
// Enhanced script with navigation-specific handling
document.addEventListener('astro:page-load', initializeFilters);
document.addEventListener('DOMContentLoaded', initializeFilters);
document.addEventListener('astro:after-swap', initializeFilters); // Critical for view transitions

// Handle navigation directly
window.addEventListener('popstate', () => {
  // Short delay to ensure DOM is ready after navigation
  setTimeout(() => ensureContentVisibility(), 50);
});

// Ensure content visibility regardless of transition state
function ensureContentVisibility() {
  // Force display of critical containers
  const containers = [
    document.querySelector('.projects-container'),
    document.querySelector('#projects-grid'),
    document.querySelector('.filter-buttons')
  ];
  
  containers.forEach(container => {
    if (container) {
      container.style.display = container.tagName === 'DIV' ? 'block' : 'flex';
      container.style.visibility = 'visible';
      container.style.opacity = '1';
    }
  });
  
  // Force grid display for project grid
  const projectsGrid = document.querySelector('#projects-grid');
  if (projectsGrid) {
    projectsGrid.style.display = 'grid';
  }
  
  // Make all project cards visible
  document.querySelectorAll('#projects-grid > div').forEach(card => {
    card.style.display = 'block';
    card.style.visibility = 'visible';
    card.style.opacity = '1';
  });
}

// Centralized initialization function with improved navigation handling
function initializeFilters() {
  // First ensure everything is visible
  ensureContentVisibility();
  
  try {
    const filterButtons = document.querySelectorAll('#borough-filters button');
    const projectCards = document.querySelectorAll('#projects-grid > div');
    
    if (!filterButtons.length || !projectCards.length) {
      console.warn('Filter buttons or project cards not found, initiating fallback');
      // Try again with a slight delay - helps with navigation timing issues
      setTimeout(() => {
        const retryButtons = document.querySelectorAll('#borough-filters button');
        const retryCards = document.querySelectorAll('#projects-grid > div');
        
        if (retryButtons.length && retryCards.length) {
          console.log('Delayed initialization successful');
          setupFilters(retryButtons, retryCards);
        } else {
          // Last resort - if content still missing, force a reload
          console.warn('Critical content missing after navigation - consider manual reload');
        }
      }, 150);
      return;
    }
    
    setupFilters(filterButtons, projectCards);
    console.log('Project filters initialized successfully');
  } catch (error) {
    console.error('Error initializing project filters:', error);
    // Ensure content is visible even if script fails
    document.querySelectorAll('#projects-grid > div').forEach(card => {
      card.style.display = 'block';
    });
  }
}

// Separated filter setup function
function setupFilters(filterButtons, projectCards) {
  // Highlight specific BID from URL hash
  highlightBidFromHash();
  
  // Listen for hash changes
  window.addEventListener('hashchange', highlightBidFromHash);
  
  // Set up filter button listeners
  filterButtons.forEach(button => {
    // Remove existing listeners to prevent duplicates after navigation
    const newButton = button.cloneNode(true);
    button.parentNode.replaceChild(newButton, button);
    
    newButton.addEventListener('click', () => {
      // Update active button
      filterButtons.forEach(btn => {
        btn.classList.remove('active');
      });
      newButton.classList.add('active');
      
      const selectedBorough = newButton.dataset.borough;
      
      // Filter projects
      projectCards.forEach(card => {
        if (selectedBorough === 'all' || card.dataset.borough === selectedBorough) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    });
  });
}

// Separated function for highlighting BIDs from hash
function highlightBidFromHash() {
  try {
    const hash = window.location.hash.substring(1);
    if (hash) {
      const decodedHash = decodeURIComponent(hash);
      console.log(`Looking for BID with name: ${decodedHash}`);
      
      const targetCard = document.querySelector(`[data-bid-name="${decodedHash}"]`);
      if (targetCard) {
        console.log(`Found matching BID card for: ${decodedHash}`);
        
        // Remove highlight from any previously highlighted card
        document.querySelectorAll('.highlight-card').forEach(el => {
          el.classList.remove('highlight-card');
        });
        
        // Add highlight to the target card
        targetCard.classList.add('highlight-card');
        
        // Ensure card is visible first (in case it was filtered out)
        targetCard.style.display = 'block';
        
        // Scroll to it with a slight delay to ensure UI is ready
        setTimeout(() => {
          targetCard.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }, 100);
      } else {
        console.warn(`No BID card found with name: ${decodedHash}`);
      }
    }
  } catch (error) {
    console.error('Error handling hash change:', error);
  }
}

// Add a final fallback for extreme cases
window.addEventListener('load', function() {
  // Check for hash in URL on load
  if (window.location.hash) {
    setTimeout(highlightBidFromHash, 300);
  }
  
  // Delay check to ensure all other scripts have run
  setTimeout(() => {
    const projectGrid = document.querySelector('#projects-grid');
    if (projectGrid && !projectGrid.children.length && window.location.pathname.includes('/projects')) {
      console.warn('No project cards found after full page load - attempting repair');
      ensureContentVisibility();
    }
  }, 500);
});
</script>